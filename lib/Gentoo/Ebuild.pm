package Ebuild;

#===============================================================================
#
#         FILE:  Ebuild.pm
#
#  DESCRIPTION:
#
#        FILES:  ---
#         BUGS:  ---
#        NOTES:  ---
#       AUTHOR:  Michael Cummings (), <mcummings@gentoo.org>
#      COMPANY:  Gentoo
#      VERSION:  1.0
#      CREATED:  04/28/07 07:43:51 EDT
# LAST REVISED:  $Date: $
#     REVISION:  $Revision: $
#===============================================================================

use strict;
use warnings;

require Exporter;
use base qw(Exporter);

our @EXPORT_OK = qw( generate );
our %EXPORT_TAGS = (all => [qw(generate)]);

our $VERSION = '0.01';

sub generate
{
    my $self            = shift;
    my $overlay_list    = $self->{overlay};
    my $verbose         = $self->{verbose};
    my $original_ebuild = $self->{original_ebuild};
    my $buildpkg        = $self->{buildpkg};
    my $buildpkgonly    = $self->{buildpkgonly};
    my $prog            = $self->{prog};
    my $keywords        = $self->{keywords};
    my $ebuild_wanted   = $self->{ebuild_wanted};
    my $upgrade         = $self->{upgrade};
    my %passed_to_install;

    #my %really_install;

    my @overlays;
    if ($overlay_list) { @overlays = split q{ }, $overlay_list }
    else
    {
        push @overlays, '/var/tmp/g-cpan'
          and $ENV{PORTDIR_OVERLAY} = '/var/tmp/g-cpan';
    }
    foreach my $target_dir (@overlays)
    {
        if (-d $target_dir)
        {
            my $gcpan_dir = File::Spec->catdir($target_dir, 'perl-gcpan');
            if (!-d $gcpan_dir)
            {
                $verbose and print_info("Create directory '$gcpan_dir'");
                mkdir $gcpan_dir, oct(0755)
                  or fatal(print_err("Couldn't create folder $gcpan_dir: $!"));
            }
            my $ebuild_dir = File::Spec->catdir($gcpan_dir, $self->{cpan}{lc($original_ebuild)}{portage_name});
            if (!-d $ebuild_dir)
            {
                $verbose and print_info("Create directory '$ebuild_dir'");
                mkdir $ebuild_dir, oct(0755)
                  or fatal(print_err("Couldn't create folder $gcpan_dir: $!"));
            }
            my $files_dir = File::Spec->catdir($ebuild_dir, 'files');
            if (!-d $files_dir)
            {
                $verbose and print_info("Create directory '$files_dir'");
                mkdir $files_dir, oct(0755)
                  or fatal(print_err("Couldn't create folder $gcpan_dir: $!"));
            }
            my $ebuild = File::Spec->catdir($ebuild_dir,
                $self->{cpan}{lc($original_ebuild)}{portage_name} . '-' . $self->{cpan}{lc($original_ebuild)}{portage_version} . '.ebuild');

            # Break out if we already have an ebuild (upgrade or
            # mistake in the code)
            if (!-f $ebuild)
            {
                print_info('Generating ebuild for ' . $self->{cpan}{lc($original_ebuild)}{name});
                my $EBUILD = IO::File->new($ebuild, '>')
                  or fatal(print_err("Couldn't open(write) file $ebuild: $!"));
                print {$EBUILD} <<"HERE";
# Copyright 1999-2006 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# This ebuild generated by $prog $VERSION

inherit perl-module

S=\${WORKDIR}/$self->{'cpan'}{lc($original_ebuild)}{'portage_sdir'}

DESCRIPTION="$self->{'cpan'}{lc($original_ebuild)}{'description'}"
HOMEPAGE="http://search.cpan.org/search?query=$self->{cpan}{lc($original_ebuild)}{portage_name}\&mode=dist"
SRC_URI="mirror://cpan/authors/id/$self->{'cpan'}{lc($original_ebuild)}{'src_uri'}"


IUSE=""

SLOT="0"
LICENSE="|| ( Artistic GPL-2 )"
KEYWORDS="$keywords"

HERE

                if (my @deps = keys %{$self->{cpan}{lc($original_ebuild)}{depends}})
                {
                    print {$EBUILD} 'DEPEND=\"';
                    my %seen_deps;
                    foreach my $dep (@deps)
                    {
                        defined $dep && $dep ne q{} or next;
                        my $portage_name = lc $self->{cpan}{lc($dep)}{portage_name};
                        $portage_name =~ m{\S}mx or next;

                        # Last ditch call to scanTree to make sure we
                        # have info
                        scanTree($portage_name);
                        next if (defined $seen_deps{$portage_name} && $seen_deps{$portage_name} > 0);
                        $seen_deps{$portage_name} = 1;
                        next
                          if ( !defined $self->{portage}{$portage_name}{category}
                            && !defined $self->{portage}{$portage_name}{name})
                          && ($self->{portage}{$portage_name}{name} !~ m/\S/);
                        $portage_name eq 'perl' || lc($portage_name) eq lc($self->{cpan}{lc($original_ebuild)}{portage_name})
                          and next;
                        my ($eb_version, $cpan_version) = stripdown($self->{portage}{lc($portage_name)}{version}, $self->{cpan}{lc($dep)}{portage_version});
                        if (   defined $self->{cpan}{lc($dep)}{portage_version}
                            && $self->{cpan}{lc($original_ebuild)}{depends}{$dep} ne '0'
                            && int($eb_version) >= int($cpan_version)
                            && $self->{cpan}{lc($original_ebuild)}{depends}{$dep} =~ m{\d}gx
                            && $self->{portage}{$portage_name}{name} ne qq{module-build})
                        {
                            print {$EBUILD} qq{>=$self->{portage}{$portage_name}{category}/$self->{portage}{$portage_name}{name}-};
                            if (defined $eb_version)
                            {
                                print {$EBUILD} $self->{portage}{lc($portage_name)}{version};
                            }
                            else
                            {
                                print {$EBUILD} $self->{cpan}{lc($dep)}{portage_version};
                            }
                            print {$EBUILD} "\n\t";
                        }
                        else
                        {
                            print {$EBUILD} qq{$self->{portage}{$portage_name}{category}/$self->{portage}{$portage_name}{name}\n\t};
                        }
                    }
                    print {$EBUILD} qq{dev-lang/perl\n};
                    if (defined $buildpkg or defined $buildpkgonly)
                    {
                        print {$EBUILD} qq{\npkg_postinst() \{\n};
                        print {$EBUILD} qq{elog "If you redistribute this package, please remember to"\n};
                        print {$EBUILD} qq{elog "update /etc/portage/categories with an entry for perl-gpcan"\n};

                        print {$EBUILD} qq{\}\n};
                    }
                    undef $EBUILD;
                    autoflush STDOUT 1;
                }
                if (-f $self->{cpan}{lc($original_ebuild)}{cpan_tarball})
                {
                    $verbose and print_ok("Copying $self->{cpan}{lc($original_ebuild)}{cpan_tarball} to $self->{sources}");
                    copy($self->{cpan}{lc($original_ebuild)}{cpan_tarball}, $self->{sources});
                }
                print_info("Ebuild generated for $ebuild_wanted");
                $self->generate_digest($ebuild);
                if (
                    !$upgrade
                    || ($upgrade
                        && defined $passed_to_install{$self->{'cpan'}->{lc($original_ebuild)}->{'name'}})
                  )
                {
                    my $portage_name = $self->{'cpan'}->{lc($original_ebuild)}->{'portage_name'};

                    #$really_install{$portage_name} = 1;
                    return 1;
                }
                last;
            }
            else
            {
                $upgrade and print_info("$ebuild_wanted already up to date") and last;
                my $portage_name = $self->{'cpan'}->{lc($original_ebuild)}->{'portage_name'};

                #$really_install{$portage_name} = 1;
                return 1;
            }
        }
    }

    return;
}

1;

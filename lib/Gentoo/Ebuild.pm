package Gentoo::Ebuild;

use strict;
use warnings;
use Gentoo::Util;
use IO::File;

require Exporter;
use base qw(Exporter);

our @EXPORT_OK = qw( check_ebuild read_ebuild write_ebuild );
our %EXPORT_TAGS = (all => [qw(check_ebuild read_ebuild write_ebuild)]);

our $VERSION = '0.01';

sub new
{
    my $proto = shift;
    my %args  = @_;
    my $class = ref($proto) || $proto;
    my $self  = {};
    foreach my $arg (keys %args) 
    {
        $self->{$arg} = $args{$arg};
    }
    $self->{E} = undef;
    $self->{W} = undef;
    $self->{M} = undef;

    return bless($self, $class);
}

sub read_ebuild
{
    use Shell::EnvImporter;
    my $self = shift;
    my ($portdir, $tc, $tp, $file) = @_;

    Gentoo::Util->check_access([$portdir, $tc, $tp]);
    if ($self->{E})
    {
        return ($self);
    }
    else
    {

        # Save original ENV for restoration
        my %O_ENV = %ENV;

        # Set some of the common ebuild specific vars
        $ENV{PN} = $tp;
        ($ENV{PF}  = $file)     =~ s/\.ebuild//gxm;
        ($ENV{PVR} = $ENV{PF})  =~ s/$ENV{PN}\-//gxm;
        ($ENV{PV}  = $ENV{PVR}) =~ s/\-r\d*//gxm;
        ($ENV{PR}  = $ENV{PVR}) =~ s/$ENV{PV}\-//gxm;
        ($ENV{P}   = $ENV{PF})  =~ s/\-$ENV{PR}//gxm;

        my $e_file = "$portdir/$tc/$tp/$file";

        # Grab some info for display
        my $e_import = Shell::EnvImporter->new(
            file            => $e_file,
            shell           => 'bash',
            auto_run        => 1,
            auto_import     => 0,
            import_modified => 1,
            import_added    => 1,
            import_removed  => 1,
        );
        $e_import->shellobj->envcmd('set');
        $e_import->run();
        $e_import->env_import();
        $self->{'DESCRIPTION'} = Gentoo::Util->strip_env($ENV{DESCRIPTION});
        $self->{'HOMEPAGE'}    = Gentoo::Util->strip_env($ENV{HOMEPAGE});
        $self->{'KEYWORDS'}    = Gentoo::Util->strip_env($ENV{KEYWORDS});
        if (exists $ENV{'DEPEND'})  { $self->{'DEPEND'}  = Gentoo::Util->strip_env($ENV{DEPEND}) }
        if (exists $ENV{'RDEPEND'}) { $self->{'RDEPEND'} = Gentoo::Util->strip_env($ENV{RDEPEND}) }
        if (exists $ENV{'PDEPEND'}) { $self->{'PDEPEND'} = Gentoo::Util->strip_env($ENV{PDEPEND}) }
        $e_import->restore_env;
        %ENV = %O_ENV;
        return ($self);
    }
    return;

}

sub write_ebuild {
    my $self = shift;
    Gentoo::Util->make_path($self->{path});
    if (defined $self->{E}) { return $self->{E} }
    if ( -f "$self->{path}/$self->{ebuild}" ) { return $self->{W} = "Ebuild already exists!" }
    my $EBUILD = IO::File->new($self->{path}."/".$self->{ebuild}, '>') or return ( $self->{E} = "Unable to open $self->{ebuild} for writing: $!"  );
print {$EBUILD} <<"HERE";
# Copyright 1999-2007 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# This ebuild generated by $self->{prog} $self->{VERSION}

inherit perl-module

S=\${WORKDIR}/$self->{'portage_sdir'}

DESCRIPTION="$self->{'description'}"
HOMEPAGE="http://search.cpan.org/search?query=$self->{cpan_name}\&mode=dist"
SRC_URI="mirror://cpan/authors/id/$self->{'src_uri'}"


IUSE=""

SLOT="0"
LICENSE="|| ( Artistic GPL-2 )"
KEYWORDS="$self->{keywords}"

HERE
print {$EBUILD} "DEPEND=\"dev-lang/perl";

if (defined $self->{depends} ) {
    foreach (@{$self->{depends}}) { print {$EBUILD} "\n\t$_" }
}

print {$EBUILD} q(");

}
sub old_write_ebuild {
    my $self            = shift;
    my $overlay_list    = $self->{overlay};
    my $verbose         = $self->{verbose};
    my $original_ebuild = $self->{original_ebuild};
    my $buildpkg        = $self->{buildpkg};
    my $buildpkgonly    = $self->{buildpkgonly};
    my $prog            = $self->{prog};
    my $keywords        = $self->{keywords};
    my $ebuild_wanted   = $self->{ebuild_wanted};
    my $upgrade         = $self->{upgrade};
    my %passed_to_install;

    #my %really_install;

    my @overlays;
    if ($overlay_list) { @overlays = split q{ }, $overlay_list }
    else
    {
        push @overlays, '/var/tmp/g-cpan'
          and $ENV{PORTDIR_OVERLAY} = '/var/tmp/g-cpan';
    }
    foreach my $target_dir (@overlays)
    {
        if (-d $target_dir)
        {
            my $perms      = 755;
            my $gcpan_dir  = File::Spec->catdir($target_dir, 'perl-gcpan');
            my $ebuild_dir = File::Spec->catdir($gcpan_dir, $self->{cpan}{lc($original_ebuild)}{portage_name});
            my $files_dir  = File::Spec->catdir($ebuild_dir, 'files');
            foreach ($gcpan_dir, $ebuild_dir, $files_dir)
            {
                if (!-d $_)
                {
                    $verbose and print_info("Create directory '$_'");
                    mkdir $_, $perms
                      or fatal(print_err("Couldn't create folder $_: $!"));
                }
            }
            my $ebuild = File::Spec->catdir($ebuild_dir,
                qq{$self->{cpan}{lc($original_ebuild)}{portage_name}-$self->{cpan}{lc($original_ebuild)}{portage_version}.ebuild});

            # Break out if we already have an ebuild (upgrade or
            # mistake in the code)
            if (!-f $ebuild)
            {
                print_info('Generating ebuild for ' . $self->{cpan}{lc($original_ebuild)}{name});
                my $EBUILD = IO::File->new($ebuild, '>')
                  or fatal(print_err("Couldn't open(write) file $ebuild: $!"));
                print {$EBUILD} <<"HERE";
# Copyright 1999-2007 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# This ebuild generated by $prog $VERSION

inherit perl-module

S=\${WORKDIR}/$self->{'cpan'}{lc($original_ebuild)}{'portage_sdir'}

DESCRIPTION="$self->{'cpan'}{lc($original_ebuild)}{'description'}"
HOMEPAGE="http://search.cpan.org/search?query=$self->{cpan}{lc($original_ebuild)}{portage_name}\&mode=dist"
SRC_URI="mirror://cpan/authors/id/$self->{'cpan'}{lc($original_ebuild)}{'src_uri'}"


IUSE=""

SLOT="0"
LICENSE="|| ( Artistic GPL-2 )"
KEYWORDS="$keywords"

HERE

                if (my @deps = keys %{$self->{cpan}{lc($original_ebuild)}{depends}})
                {
                    print {$EBUILD} 'DEPEND=\"';
                    my %seen_deps;
                    foreach my $dep (@deps)
                    {
                        defined $dep && $dep ne q{} || next;
                        my $portage_name = lc $self->{cpan}{lc($dep)}{portage_name};
                        $portage_name =~ m{\S}mx or next;

                        # Last ditch call to scanTree to make sure we
                        # have info
                        scanTree($portage_name);
                        next if (defined $seen_deps{$portage_name} && $seen_deps{$portage_name} > 0);
                        $seen_deps{$portage_name} = 1;
                        next
                          if ( !defined $self->{portage}{$portage_name}{category}
                            && !defined $self->{portage}{$portage_name}{name})
                          && ($self->{portage}{$portage_name}{name} !~ m/\S/xm);
                        ($portage_name eq 'perl')
                          || (lc($portage_name) eq lc($self->{cpan}{lc($original_ebuild)}{portage_name})) && next;
                        my ($eb_version, $cpan_version) = stripdown($self->{portage}{lc($portage_name)}{version}, $self->{cpan}{lc($dep)}{portage_version});
                        if (   defined $self->{cpan}{lc($dep)}{portage_version}
                            && $self->{cpan}{lc($original_ebuild)}{depends}{$dep} ne '0'
                            && int($eb_version) >= int($cpan_version)
                            && $self->{cpan}{lc($original_ebuild)}{depends}{$dep} =~ m{\d}gxm
                            && $self->{portage}{$portage_name}{name} ne 'module-build')
                        {
                            print {$EBUILD} qq{>=$self->{portage}{$portage_name}{category}/$self->{portage}{$portage_name}{name}-};
                            if (defined $eb_version)
                            {
                                print {$EBUILD} $self->{portage}{lc($portage_name)}{version};
                            }
                            else
                            {
                                print {$EBUILD} $self->{cpan}{lc($dep)}{portage_version};
                            }
                            print {$EBUILD} "\n\t";
                        }
                        else
                        {
                            print {$EBUILD} qq{$self->{portage}{$portage_name}{category}/$self->{portage}{$portage_name}{name}\n\t};
                        }
                    }
                    print {$EBUILD} qq{dev-lang/perl\n};
                    if (defined $buildpkg or defined $buildpkgonly)
                    {
                        print {$EBUILD} qq{\npkg_postinst() \{\n};
                        print {$EBUILD} qq{elog "If you redistribute this package, please remember to"\n};
                        print {$EBUILD} qq{elog "update /etc/portage/categories with an entry for perl-gpcan"\n};

                        print {$EBUILD} qq{\}\n};
                    }
                    undef $EBUILD;
                    autoflush STDOUT 1;
                }
                if (-f $self->{cpan}{lc($original_ebuild)}{cpan_tarball})
                {
                    $verbose and print_ok("Copying $self->{cpan}{lc($original_ebuild)}{cpan_tarball} to $self->{sources}");
                    copy($self->{cpan}{lc($original_ebuild)}{cpan_tarball}, $self->{sources});
                }
                print_info("Ebuild generated for $ebuild_wanted");
                $self->generate_digest($ebuild);
                if (
                    !$upgrade
                    || ($upgrade
                        && defined $passed_to_install{$self->{'cpan'}->{lc($original_ebuild)}->{'name'}})
                  )
                {
                    my $portage_name = $self->{'cpan'}->{lc($original_ebuild)}->{'portage_name'};

                    #$really_install{$portage_name} = 1;
                    return 1;
                }
                last;
            }
            else
            {
                $upgrade and print_info("$ebuild_wanted already up to date") and last;
                my $portage_name = $self->{'cpan'}->{lc($original_ebuild)}->{'portage_name'};

                #$really_install{$portage_name} = 1;
                return 1;
            }
        }
    }

    return;
}

sub check_ebuild
{
    my $self = shift;
    # Check everything has a value
    # Check that the deps exist...?

}
1;

=pod



=head1 NAME

Gentoo::Ebuild - ebuild specific functions

=head1 DESCRIPTION

The C<Gentoo::Ebuild> class provides basic ebuild functionality for reading,
writing and testing ebuilds.



=over 2

=item $obj->read_ebuild($portage_dir, $category, $module, $ebuild_file);

Providing the 



=item *



=back



=cut

